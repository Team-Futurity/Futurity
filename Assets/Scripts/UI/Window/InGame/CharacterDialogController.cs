using System.Collections;
using System.Collections.Generic;
using TMPro;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.UIElements;

public class CharacterDialogController : MonoBehaviour
{
	[Header ("Character의 이미지를 변경하거나 텍스트 출력을 변경하는 스크립트")]
	[Space (15)]

	[SerializeField]
	private WindowController windowController;

	[SerializeField]
	private UnityEngine.UI.Image charactorImage;
	[SerializeField]
	private TextMeshProUGUI charactorText;

	[SerializeField]
	private float typingDelay = 0.05f;
	[SerializeField]
	private List<string> fullText;
	[SerializeField]
	private int textNum = 0;

	private string currentText = "";
	private bool isTextEnd = false;

	private Coroutine showTextCoroutine;

	/// <summary>
	/// 출력할 텍스트를 설정합니다.
	/// </summary>
	/// <param name="texts">출력할 텍스트 리스트</param>
	public void SetTexts(List<string> texts)
	{
		fullText = texts;
	    textNum = 0;
	}

	/// <summary>
	/// CharacterDialog창의 대화창의 텍스트를 출력하는 스크립트로.
	/// 저장된 텍스트를 하나씩 출력하거나, 출력 중인 텍스트를 스킵합니다.
	/// </summary>
	public void WriteCharactorText()
	{
		if (showTextCoroutine != null)
		{
			StopCoroutine(showTextCoroutine);
			SkipNextText();
		}
		else
		{
			currentText = "";
			charactorText.text = "";
			isTextEnd = false;
			showTextCoroutine = StartCoroutine(ShowText());
		}
	}

	/// <summary>
	/// 텍스트를 하나씩 출력하는 코루틴입니다.
	/// </summary>
	IEnumerator ShowText()
	{
		if (fullText.Count > textNum)
		{
			for (int i = 0; i <= fullText[textNum].Length; i++)
			{
				currentText = fullText[textNum].Substring(0, i);
				charactorText.text = currentText;
				yield return new WaitForSeconds(typingDelay);
			}
			TypingTextEnd();
		}
		else
		{
			windowController.WindowClose();

			//임시 : 추후 삭제 예정, 크리틱 빌드를 위함
			for(int i = 0; i < InGameUnitManager.Instance.enemys.Count; i++)
			{
				InGameUnitManager.Instance.enemys[i].gameObject.SetActive(true);
			}
		}
	}

	/// <summary>
	/// 다음 텍스트로 넘어갑니다.
	/// </summary>
	public void SkipNextText()
	{
		charactorText.text = fullText[textNum];
		TypingTextEnd();
	}

	/// <summary>
	/// 텍스트 타이핑을 완료하고 관련 상태를 갱신합니다.
	/// </summary>
	public void TypingTextEnd()
	{
		FDebug.Log($"{gameObject}의 \"{fullText}\" Text 타이핑 완료");
		textNum++;
		isTextEnd = true;
		showTextCoroutine = null;
	}

	/// <summary>
	/// 현재 출력 중인 텍스트를 반환합니다.
	/// </summary>
	/// <returns>현재 출력중인 텍스트</returns>
	public string GetThisText()
	{
		if (fullText.Count > textNum)
		{
			return fullText[textNum];
		} 
		else
		{
			return fullText[fullText.Count - 1];
		}
	}

	/// <summary>
	/// 텍스트 출력 완료 여부를 반환합니다.
	/// </summary>
	/// <returns>텍스트 출력 완료 여부</returns>
	public bool GetTextEnd()
	{
		return isTextEnd;
	}

	/// <summary>
	/// 캐릭터 스프라이트를 변경합니다.
	/// </summary>
	/// <param name="changeSprite"></param>
	public void SetCharactorSprite(Sprite changeSprite)
	{
		charactorImage.sprite = changeSprite;
	}

	/// <summary>
	/// 타이핑 딜레이 시간을 설정합니다.
	/// </summary>
	/// <param name="delayTime">타이핑 딜레이 시간</param>
	public void SetTypingDelay(float delayTime)
	{
		typingDelay = delayTime;
	}
}
